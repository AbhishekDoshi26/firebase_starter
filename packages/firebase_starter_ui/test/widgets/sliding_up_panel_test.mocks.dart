// Mocks generated by Mockito 5.0.17 from annotations
// in firebase_starter_ui/test/widgets/sliding_up_panel_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:flutter/material.dart' as _i4;
import 'package:flutter/src/animation/curves.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sliding_up_panel/src/panel.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [PanelController].
///
/// See the documentation for Mockito's code generation for more information.
class MockPanelController extends _i1.Mock implements _i2.PanelController {
  MockPanelController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAttached =>
      (super.noSuchMethod(Invocation.getter(#isAttached), returnValue: false)
          as bool);
  @override
  set panelPosition(double? value) =>
      super.noSuchMethod(Invocation.setter(#panelPosition, value),
          returnValueForMissingStub: null);
  @override
  double get panelPosition =>
      (super.noSuchMethod(Invocation.getter(#panelPosition), returnValue: 0.0)
          as double);
  @override
  bool get isPanelAnimating =>
      (super.noSuchMethod(Invocation.getter(#isPanelAnimating),
          returnValue: false) as bool);
  @override
  bool get isPanelOpen =>
      (super.noSuchMethod(Invocation.getter(#isPanelOpen), returnValue: false)
          as bool);
  @override
  bool get isPanelClosed =>
      (super.noSuchMethod(Invocation.getter(#isPanelClosed), returnValue: false)
          as bool);
  @override
  bool get isPanelShown =>
      (super.noSuchMethod(Invocation.getter(#isPanelShown), returnValue: false)
          as bool);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> open() => (super.noSuchMethod(Invocation.method(#open, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> hide() => (super.noSuchMethod(Invocation.method(#hide, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> show() => (super.noSuchMethod(Invocation.method(#show, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> animatePanelToPosition(double? value,
          {Duration? duration, _i4.Curve? curve = _i5.Curves.linear}) =>
      (super.noSuchMethod(
          Invocation.method(#animatePanelToPosition, [value],
              {#duration: duration, #curve: curve}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> animatePanelToSnapPoint(
          {Duration? duration, _i4.Curve? curve = _i5.Curves.linear}) =>
      (super.noSuchMethod(
          Invocation.method(#animatePanelToSnapPoint, [],
              {#duration: duration, #curve: curve}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}
